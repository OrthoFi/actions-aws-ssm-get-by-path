name: AWS SSM Get by Path
description: Get AWS SSM parameters by path
inputs:
  decrypt:
    default: "false"
    description: Indicates if retrieved parameters should be decrypted
    required: true

  delimiter:
    default: _
    description: Delimiter to use for subkeys
    required: true

  file:
    description: Environment variable file to output to
    required: false

  paths:
    description: Paths to retrieve parameters by. Subsequent paths should be comma delimited
    required: true

  prefix:
    description: Prefix, if any, to apply before exporting environment variables
    required: false

  recursive:
    default: "false"
    description: Get parameters recursively
    required: true

  save-to-environment:
    default: "false"
    description: Indicates if the retrieved parameters should also be exported as environment variables
    required: true

outputs:
  ssm-params:
    description: The retrieved parameters as a JSON object
    value: ${{ steps.get-ssm-parameters.outputs.ssm-params }}

runs:
  using: composite
  steps:
    - name: Get SSM Parameters
      id: get-ssm-parameters
      shell: pwsh
      run: |
        $paths = '${{ inputs.paths }}'.Split(',')
        $saveToEnvironment = [System.Convert]::ToBoolean('${{ inputs.save-to-environment }}')
        $prefix = '${{ inputs.prefix }}'
        $delimiter = '${{ inputs.delimiter }}'
        $recursive = [System.Convert]::ToBoolean('${{ inputs.recursive }}')
        $decrypt = [System.Convert]::ToBoolean('${{ inputs.decrypt }}')

        $result = @{}

        try {
            foreach ($path in $paths) {
                Write-Host "Fetching SSM parameters for path: $path"
                $parameters = ConvertFrom-Json $($(aws ssm get-parameters-by-path --path $path `
                            "$($decrypt ? "--with-decryption" : "--no-with-decryption")" `
                            "$($recursive ? "--recursive" : "--no-recursive")") -join '')

                Write-Host "Number of parameters fetched: $($parameters.Parameters.Count)"

                foreach ($parameter in $parameters.Parameters) {
                    $name = $parameter.Name.Replace($path, "").ToUpper().Replace("/", $delimiter).Replace("-", "_")
                    $name = "$($prefix)$($name)"
                    $result[$name] = $parameter.Value

                    if ($saveToEnvironment) {
                        if ($parameter.Type -eq "String") {
                            Write-Host "Creating ENV var (String Type) : $name = $($parameter.Value)"
                        } elseif ($parameter.Type -eq "SecureString") {
                            Write-Host "Creating ENV var (SecureString Type): $name = [Sensitive Data]"
                            Write-Output "::add-mask::$($parameter.Value)"
                        }

                        Write-Output "$name=$($parameter.Value)" >> $env:GITHUB_ENV
                    }
                }
            }

            Write-Host "Successfully fetched all parameters."
            Write-Output "ssm-params=$($result | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT

            $fileName = '${{ inputs.file }}'
            if ($fileName) {
                $result.Keys | Foreach-Object { "$_=$($result[$_])" } | Out-File $fileName
            }
        } catch {
            Write-Host "An error occurred: $_"
            exit 1
        }
